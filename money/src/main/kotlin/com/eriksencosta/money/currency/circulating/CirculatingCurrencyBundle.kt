/*
 * This file is part of the Money package.
 *
 * Copyright (c) Eriksen Costa <eriksencosta@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was auto-generated by running the "generateCirculatingCurrenciesDataClasses" Gradle task. Always run the
 * task after upgrading the ICU library.
 */

package com.eriksencosta.money.currency.circulating

import com.eriksencosta.money.currency.CurrencyBundle
import com.eriksencosta.money.currency.CurrencyData
import com.eriksencosta.money.currency.UndefinedCurrencyData
import com.eriksencosta.money.currency.circulating.data.CurrenciesCodes
import com.eriksencosta.money.currency.circulating.data.CurrenciesData
import com.eriksencosta.money.currency.circulating.data.CurrenciesLookup
import com.eriksencosta.money.currency.circulating.data.CurrenciesSecondaryCodes

internal object CirculatingCurrencyBundle : CurrencyBundle {
    // private const val NUMBER_OF_CURRENCIES: Int = 306
    private const val CODES_REGEX_PATTERN: String = "[A-Z]{3}"
    private const val SECONDARY_CODES_REGEX_PATTERN: String = "[0-9]{3}"

    // fun currencies(): List<CurrencyData> = codes().map { ofCode(it) }
    // override fun numberOfCurrencies(): Int = NUMBER_OF_CURRENCIES
    override fun codes(): Set<String> = CurrenciesCodes().codes
    override fun secondaryCodes(): Set<String> = CurrenciesSecondaryCodes().codes

    override fun patternForCode(): Regex = Regex("^$CODES_REGEX_PATTERN\$")
    override fun patternForSecondaryCode(): Regex = Regex("^$SECONDARY_CODES_REGEX_PATTERN\$")

    override fun ofCode(code: String): CurrencyData = CurrenciesData.of(code)
    override fun ofSecondaryCode(code: String): CurrencyData = CurrenciesLookup.of(code).let {
        if (it.isNotBlank()) ofCode(it) else UndefinedCurrencyData()
    }
}
