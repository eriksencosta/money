/*
 * This file is part of the Money package.
 *
 * Copyright (c) Eriksen Costa <eriksencosta@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was auto-generated by running the "generateCirculatingCurrenciesDataClasses" Gradle task. Always run the
 * task after upgrading the ICU library.
 */

package com.eriksencosta.money.currency.circulating.data

import com.eriksencosta.money.caching.Cache
import com.eriksencosta.money.currency.CurrencyData
import com.eriksencosta.money.currency.UndefinedCurrencyData
import com.eriksencosta.money.currency.createSizedCache
import com.eriksencosta.money.currency.findByCode

@Suppress("CyclomaticComplexMethod")
internal object CurrenciesData {
    private const val NUMBER_OF_DATA_CLASSES = 7

    private val cache: Cache<Map<String, CurrencyData>> by lazy {
        createSizedCache(NUMBER_OF_DATA_CLASSES)
    }

    private val prioritizedCurrencies = CurrenciesData0().currencies

    fun of(code: String): CurrencyData = prioritizedCurrencies.getOrElse(code) {
        when (code) {
            in "ADP".."BUK" -> findByCode("Data1", code) { CurrenciesData1().currencies }
            in "BWP".."GQE" -> findByCode("Data2", code) { CurrenciesData2().currencies }
            in "GRD".."MGA" -> findByCode("Data3", code) { CurrenciesData3().currencies }
            in "MGF".."SDG" -> findByCode("Data4", code) { CurrenciesData4().currencies }
            in "SDP".."XBA" -> findByCode("Data5", code) { CurrenciesData5().currencies }
            in "XBB".."ZWR" -> findByCode("Data6", code) { CurrenciesData6().currencies }
            else -> UndefinedCurrencyData(code)
        }
    }

    private fun findByCode(key: String, code: String, block: () -> Map<String, CurrencyData>): CurrencyData =
        cache.get(key) { block() }.findByCode(code)
}
