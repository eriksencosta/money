/*
 * This file is part of the Money package.
 *
 * Copyright (c) Eriksen Costa <eriksencosta@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was auto-generated by running the "generateCryptoCurrenciesDataClasses" Gradle task. Always run the
 * task after a DTI database update.
 */

package com.eriksencosta.money.currency.crypto.data

import com.eriksencosta.money.currency.CurrencyData

// 24 currencies
@Suppress("MagicNumber", "MaxLineLength", "StringLiteralDuplication")
internal class CurrenciesData0 {
    val currencies: Map<String, CurrencyData> get() = mapOf(
        "20J63Z4N3" to CurrencyData("20J63Z4N3", "SOL", "Solana SOL", "◎", "NATIVE", 9),
        "24VV95T9F" to CurrencyData("24VV95T9F", "XMR", "Monero XMR", "ɱ", "NATIVE", 12),
        "4H95J0R2X" to CurrencyData("4H95J0R2X", "BTC", "Bitcoin", "₿", "NATIVE", 8),
        "7KL6LCVWQ" to CurrencyData("7KL6LCVWQ", "ICP", "Internet Computer Token", "∞", "NATIVE", 8),
        "820B7G1NL" to CurrencyData("820B7G1NL", "DOGE", "Dogecoin", "Ð", "NATIVE", 9),
        "993D8X1FB" to CurrencyData("993D8X1FB", "TRX", "TRON TRX", "TRX", "NATIVE", 6),
        "C0D7M4H0R" to CurrencyData("C0D7M4H0R", "MNT", "Mantle", "MNT", "NATIVE", 18),
        "C4SRNZD8K" to CurrencyData("C4SRNZD8K", "XLM", "Stellar Lumen", "XLM", "NATIVE", 7),
        "DC83NXWML" to CurrencyData("DC83NXWML", "NEAR", "NEAR Protocol", "NEAR", "NATIVE", 24),
        "DHQPD433B" to CurrencyData("DHQPD433B", "HBAR", "Hedera Hashgraph HBAR", "HBAR", "NATIVE", 8),
        "GWQWXVV7J" to CurrencyData("GWQWXVV7J", "ETC", "Ethereum Classic Ether", "ξ", "NATIVE", 18),
        "HWGL1C2CK" to CurrencyData("HWGL1C2CK", "ADA", "Cardano ADA", "₳", "NATIVE", 6),
        "HWRGLMT9T" to CurrencyData("HWRGLMT9T", "BNB", "Binance Smart Chain", "BNB", "NATIVE", 8),
        "K8B662X5Z" to CurrencyData("K8B662X5Z", "FIL", "Filecoin", "FIL", "NATIVE", 18),
        "L6GTZC9G4" to CurrencyData("L6GTZC9G4", "XRP", "Ripple XRP", "✕", "NATIVE", 6),
        "M3Z631TN4" to CurrencyData("M3Z631TN4", "AVAX", "Avalanche AVAX", "AVAX", "NATIVE", 9),
        "P5B46MFPP" to CurrencyData("P5B46MFPP", "DOT", "Polkadot DOT", "●", "NATIVE", 10),
        "QBZLT5MT1" to CurrencyData("QBZLT5MT1", "TON", "Toncoin", "TON", "NATIVE", 9),
        "RQWW6J6K0" to CurrencyData("RQWW6J6K0", "MATIC", "Polygon Matic", "MATIC", "NATIVE", 18),
        "SSFZXXTDD" to CurrencyData("SSFZXXTDD", "APT", "Aptos Token", "APT", "NATIVE", 8),
        "W7BGSQ91D" to CurrencyData("W7BGSQ91D", "STX", "Stacks", "STX", "NATIVE", 6),
        "WTX0G7K46" to CurrencyData("WTX0G7K46", "LTC", "Litecoin", "Ł", "NATIVE", 8),
        "X9J9K872S" to CurrencyData("X9J9K872S", "ETH", "Ethereum Ether", "Ξ", "NATIVE", 18),
        "ZWK6RM36C" to CurrencyData("ZWK6RM36C", "KAS", "Kaspa", "KAS", "NATIVE", 5),
    )
}
