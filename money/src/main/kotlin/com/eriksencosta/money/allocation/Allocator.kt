/*
 * This file is part of the Money package.
 *
 * Copyright (c) Eriksen Costa <eriksencosta@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.eriksencosta.money.allocation

import com.eriksencosta.money.Money
import com.eriksencosta.money.allocation.difference.DifferenceAllocation

/**
 * Base class for [Allocation] implementations. This class implements the Template Method pattern. Subclasses need to
 * override the following members:
 *
 * * [differenceAllocator]: an [DifferenceAllocation] strategy used to allocate the difference between the original
 *   [Money] amount and its resulting allocations
 * * [calculate]: calculates the allocations for a [Money] amount
 * * [calculateReverse]: calculates the reverse result for sanity check purposes
 *
 * With these methods implemented, the [allocate] method does the allocation and applies the [DifferenceAllocation]
 * strategy to fix any difference generated by [calculate]. Also, the method handles the allocation of negative [Money]
 * amounts.
 *
 * See [EvenAllocator] and [ProportionalAllocator] for example implementations.
 *
 * @see[EvenAllocator]
 * @see[ProportionalAllocator]
 */
public sealed class Allocator<T : AllocationBy> : Allocation<T> {
    /**
     * Strategy to allocate the difference generated when allocating a [Money] amount.
     */
    protected abstract val differenceAllocator: DifferenceAllocation

    /**
     * Allocates a [Money].
     *
     * @param[money] The [Money] amount to allocate according to [by].
     * @param[by] The parameter to calculate the allocations.
     * @throws[IllegalArgumentException] When [money] has no rounding support.
     * @throws[IllegalArgumentException] When [by] is not supported.
     * @return A [Result] with the allocation result.
     */
    override fun allocate(money: Money, by: T): Result =
        require(money.hasRounding) { "Money must support rounding for precise allocation calculation" }.run {
            when (money.isNegative) {
                true -> -allocate(+money, by)
                false -> {
                    val rounded = money.round()
                    val calculations = calculate(rounded, by)
                    val reverse = calculateReverse(calculations, by)

                    Result(rounded, reverse, calculations, differenceAllocator)
                }
            }
        }

    /**
     * Calculates the allocations for a [money] amount according to the [by] value.
     *
     * @param[money] The [Money] amount to allocate according to [by].
     * @param[by] The parameter to calculate the allocations.
     * @return The allocation calculations.
     */
    protected abstract fun calculate(money: Money, by: T): List<Money>

    /**
     * Calculates the reverse result. The sanity check is important to find any difference that must be allocated in
     * the resulting allocations list.
     *
     * @param[allocations] The allocations list calculated by [calculate].
     * @param[by] The parameter used to calculate the allocations.
     * @return The reverse allocation calculations.
     */
    protected abstract fun calculateReverse(allocations: List<Money>, by: T): Money
}
