/*
 * This file is part of the Money package.
 *
 * Copyright (c) Eriksen Costa <eriksencosta@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.eriksencosta.money.allocation

import com.eriksencosta.money.Money

/**
 * Defines the [Money] allocation interface.
 */
public sealed interface Allocation<T : AllocationBy> {
    /**
     * Allocates a [Money].
     *
     * If a [Money] amount is indivisible, its value is returned in the first element of the allocations list.
     *
     * It's up to implementations to deal with rounding issues and to appropriately allocate any difference generated by
     * the allocation operation.
     *
     * @param[money] A [Money] amount to allocate according to [by].
     * @param[by] The parameter to calculate the allocations.
     * @return A [Result] with the allocation result.
     */
    public fun allocate(money: Money, by: T): Result
}

/**
 * Defines the allocation parameter types.
 *
 * @see[Allocation.allocate]
 */
public sealed interface AllocationBy
